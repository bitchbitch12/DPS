# -*- coding: utf-8 -*-
"""Copy of 1-DPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v6m0v9b4pxm6jJrmadMz9_379ct55Gly
"""

alphabets = dict()
for i in range(0, 26):
  character = chr(i + 97)
  if character not in alphabets:
    alphabets[character] = i

"""#1

##a)
"""

def additive_encrypt(plain_text, key):
  cipher_text = ''
  for letter in plain_text:
     value = (alphabets[letter] + key) % 26
     cipher_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return cipher_text

def additive_decrypt(cipher_text, key):
  plain_text = ''
  for letter in cipher_text:
    value = (alphabets[letter] - key) % 26
    plain_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return plain_text

text, key = "thisisanexercise", 20
cipher_text = additive_encrypt(text, key)
plain_text = additive_decrypt(cipher_text, key)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)

"""##b)"""

from sympy import mod_inverse

def multiplicative_encrypt(plain_text, key):
  cipher_text = ''
  for letter in plain_text:
     value = (alphabets[letter] * key) % 26
     cipher_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return cipher_text

def multiplicative_decrypt(cipher_text, key):
  plain_text = ''
  for letter in cipher_text:
    value = (alphabets[letter] * mod_inverse(key, 26)) % 26
    plain_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return plain_text

text, key = "thisisanexercise", 15
cipher_text = multiplicative_encrypt(text, key)
plain_text = multiplicative_decrypt(cipher_text, key)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)

"""##c)"""

def affine_encrypt(plain_text, key1, key2):
  cipher_text = ''
  for letter in plain_text:
    value = (alphabets[letter] * key1 + key2) % 26
    cipher_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return cipher_text

def affine_decrypt(cipher_text, key1, key2):
  plain_text = ''
  for letter in cipher_text:
    value = ((alphabets[letter] - key2) * mod_inverse(key1, 26)) % 26
    plain_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return plain_text

text, key1, key2 = 'thisisanexercise', 15, 20
cipher_text = affine_encrypt(text, key1, key2)
plain_text = affine_decrypt(cipher_text, key1, key2)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)

"""##d)"""

def autokey_encrypt(plain_text, key1):
  keystream, cipher_text = [], ''
  keystream.append(key1)
  value1 = (alphabets[plain_text[0]] + key1) % 26
  cipher_text += (list(alphabets.keys())[list(alphabets.values()).index(value1)])
  for i in range(1, len(plain_text)):
    keystream.append(alphabets[plain_text[i-1]])
    value = (alphabets[plain_text[i]] + alphabets[plain_text[i-1]]) % 26
    cipher_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return cipher_text, keystream

def autokey_decrypt(cipher_text, keystream):
  plain_text = ''
  for i in range(len(cipher_text)):
    value = (alphabets[cipher_text[i]] - keystream[i]) % 26
    plain_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return plain_text

text, key1 = 'thisisanexercise', 7
cipher_text, keystream = autokey_encrypt(text, key1)
plain_text = autokey_decrypt(cipher_text, keystream)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)

"""#2"""

def additive_decrypt(cipher_text, key):
  plain_text = ''
  for letter in cipher_text:
    value = (alphabets[letter] - key) % 26
    plain_text += (list(alphabets.keys())[list(alphabets.values()).index(value)])
  return plain_text

for key in range(9, 15):
  cipher_text = "NCJAEZRCLASJLYODEPRLYZRCLASJLCPEHZDTOPDZQLNZTY".lower()
  plain_text = additive_decrypt(cipher_text, key)
  print(key, end = " -> ")
  print(plain_text)

"""#3"""



"""#4"""

from collections import defaultdict

def find_decryptkey(key_stream):
  key_dict = defaultdict(int)
  for i in range(len(key_stream)):
    key_dict[key_stream[i]] = i+1

  keys = list(key_dict.keys())
  keys.sort()
  key_dict = {i: key_dict[i] for i in keys}
  return key_dict.values()

key_stream = [3, 2, 6, 1, 5, 4]
find_decryptkey(key_stream)

"""#5"""

def transpose(matrix):
  temp_Matrix = [['']*len(matrix) for j in range(len(matrix[0]))]
  for i in range(len(matrix)):
    for j in range(len(matrix[0])):
      temp_Matrix[j][i] = matrix[i][j]
  return temp_Matrix

def transpose_encrypt(plain_text, key_stream, block_size):
  res, cipher_text = [], ''
  plain_text = plain_text.replace(' ', '')
  for i in range(0, len(plain_text), block_size):
    blocked_text = plain_text[i:i+block_size]
    if len(blocked_text) != block_size:
      blocked_text += 'z'*(block_size - len(blocked_text))
    res1 = list(blocked_text)
    res.append(res1)

  key_encrypted = []
  for i in range(len(res)):
    temp = []
    for j in key_stream.keys():
        temp.append(res[i][j-1])
    key_encrypted.append(temp)
  for res in transpose(key_encrypted):
    cipher_text += ''.join(res)

  return cipher_text

def find_decryptkey(key_stream):
  keys = list(key_stream.keys())
  keys.sort()
  key_dict = {i: key_stream[i] for i in keys}
  return key_dict

def transpose_decrypt(cipher_text, key_stream, block_size):
  plain_text = ''
  row_size = len(cipher_text) // block_size
  col_mat = [['']*block_size for i in range(row_size)]
  k = 0
  for i in range(block_size):
    for j in range(row_size):
      col_mat[j][i] = cipher_text[k]
      k += 1

  plain_mat = [['']*block_size for i in range(row_size)]
  key_decrypted = find_decryptkey(key_stream)
  keys = list(key_decrypted.values())
  for i in range(row_size):
    for j in range(block_size):
      plain_mat[i][j] = col_mat[i][keys[j]-1]
      plain_text += col_mat[i][keys[j]-1]

  return plain_text

def double_transpose_encrypt(text, key_stream, block_size):
  encrypt1 = transpose_encrypt(text, key_stream, block_size)
  cipher_text = transpose_encrypt(encrypt1, key_stream, block_size)
  return cipher_text

def double_transpose_decrypt(cipher_text, key_stream, block_size):
  decrypt1 = transpose_decrypt(cipher_text, key_stream, block_size)
  plain_text = transpose_decrypt(decrypt1, key_stream, block_size)
  return plain_text

key_stream = {3:1, 1:2, 4:3, 5:4, 2:5}
text = 'enemy attacks tonight'
block_size = 5
cipher_text = double_transpose_encrypt(text, key_stream, block_size)
plain_text = double_transpose_decrypt(cipher_text, key_stream, block_size)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)

"""#6"""

def double_transpose_encrypt_mod(text, key_stream, block_size, rounds):
  for i in range(rounds):
    text = transpose_encrypt(text, key_stream, block_size)
  return text

def double_transpose_decrypt_mod(cipher_text, key_stream, block_size, rounds):
  for i in range(rounds):
    cipher_text = transpose_decrypt(cipher_text, key_stream, block_size)
  return cipher_text

key_stream = {3:1, 1:2, 4:3, 5:4, 2:5}
text = 'enemy attacks tonight'
block_size = 5
rounds = 5
cipher_text = double_transpose_encrypt_mod(text, key_stream, block_size, rounds)
plain_text = double_transpose_decrypt_mod(cipher_text, key_stream, block_size, rounds)
print(text, end = " -> ")
print(cipher_text, end = " -> ")
print(plain_text)
